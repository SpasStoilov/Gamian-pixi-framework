#SplashEmitter.once emmitFirstTemplate(){
    this.model.shiftOnResize(
        "feat3", 
        "position",
        {
            setState(){
                return window.innerWidth > 700 ? 0 : 1
            },
            chooseFromData:[
                [
                    {
                        path: this.modeData.animationsDrawings["path-0"]?.path,
                        viewBox: this.modeData.animationsDrawings["path-0"]?.viewBox,
                        steps: 1,
                    }
                ],
                [
                    {
                        path: this.modeData.animationsSVG["path1.svg"]?.path,
                        viewBox: this.modeData.animationsSVG["path1.svg"]?.viewBox,
                        steps: 70,
                    }
                ]
            ]
        },
        "TFPMid",
        "TFPAnimator"
    )
}

>>>
@omponent Container;
    name ~ splash_container;
    emitter ~ SplashEmitter;
    visible ~ this.emitterName == this.ongoingEvent.initiatedEmitter;
    @omponent Sprite; 
        args ~ ../assets/sprites/splash-screen/feat1.png;
        name ~ feat1;
        scale ~ {x:{bs:0.1}, y:{bs:0.1}};
        position ~ {
            x:{"%":0.35},
            y:{"%":0}
        };
        update ~ ["position", "scale"];
    <
    @omponent Sprite; 
        args ~ ../assets/sprites/splash-screen/feat2.png;
        name ~ feat2;
        scale ~ {x:{bs:0.1}, y:{bs:0.1}};
        position ~ {
            x:{"%":0.5},
            y:{"%":0}
        };
        update ~ ["position", "scale"];
    <
    @omponent Sprite; 
        args ~ ../assets/sprites/splash-screen/feat3.png;
        name ~ feat3;
        scale ~ {x:{bs:0.1}, y:{bs:0.1}};
        position ~ {
            x:{"%":0.65},
            y:{"%":0}
        };
        update ~ ["position", "scale"];
    <
<
